# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: panda3test-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "*"


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/hello-dev.jar

functions:
  # participants lambdas
  createParticipant:
    handler: panda3.lambda.paarticipants.CreateParticipant
    events:
      - http:
          method: post
          path: participants/create
          cors: true

  deleteParticipant:
    handler: panda3.lambda.paarticipants.DeleteParticipant
    events:
      - http:
          path: participants/delete
          method: delete
          cors: true

  readParticipant:
    handler: panda3.lambda.paarticipants.ReadParticipant
    events:
      - http:
          path: participant/read
          method: get
          cors: true


  readParticipants:
    handler: panda3.lambda.paarticipants.ReadParticipants
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: participants/read
          method: get
          cors: true

  updateParticipant:
    handler: panda3.lambda.paarticipants.UpdateParticipant
    events:
      - http:
          path: participants/update
          method: put
          cors: true


  # tests lambdas
  createTest:
    handler: panda3.lambda.tests.CreateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          method: post
          path: tests/create
          cors: true

  readTests:
    handler: panda3.lambda.tests.ReadTests
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/read
          method: get
          cors: true

  readTest:
    handler: panda3.lambda.tests.ReadTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/{id}
          method: get
          cors: true


  deleteTest:
    handler: panda3.lambda.tests.DeleteTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/delete/{id}
          method: delete
          cors: true



  updateTest:
    handler: panda3.lambda.tests.UpdateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/update
          method: put
          cors: true

  # lambdas for testing
  test:
    handler: panda3.lambda.testingLambdas.SimpleTest
    events:
      - http:
          path: participants/test
          method: post
          cors: true

resources:
  Resources:
    participantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: participants_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    testsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tests_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
