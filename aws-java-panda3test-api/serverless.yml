# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: panda3test-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "cognito-idp:*"
        - "s3:*"
      Resource:
        - "*"


# you can overwrite defaults here
#  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#    - Effect: "Allow"
#      Action:
#      Resource:
#        Fn::Join:
#          - ""
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/hello-dev.jar

functions:
  # participants lambdas
  createParticipant:
    handler: panda3.lambda.paarticipants.CreateParticipant
    events:
      - http:
          method: post
          path: participants/create
          cors: true

  deleteParticipant:
    handler: panda3.lambda.paarticipants.DeleteParticipant
    events:
      - http:
          path: participants/delete
          method: delete
          cors: true

  readParticipant:
    handler: panda3.lambda.paarticipants.ReadParticipant
    events:
      - http:
          path: participants/read/{id}
          method: get
          cors: true


  readParticipants:
    handler: panda3.lambda.paarticipants.ReadParticipants
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: participants/read
          method: get
          cors: true


  readRecruiters:
    handler: panda3.lambda.paarticipants.ReadRecruiters
    events:
      - http:
          path: recruiters/read
          method: get
          cors: true


  readUsers:
    handler: panda3.lambda.paarticipants.ReadUsers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: users/all/read
          method: get
          cors: true

  updateParticipant:
    handler: panda3.lambda.paarticipants.UpdateParticipant
    events:
      - http:
          path: participants/update
          method: put
          cors: true



  # tests lambdas
  createTest:
    handler: panda3.lambda.tests.CreateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          method: post
          path: tests/create
          cors: true

  readTests:
    handler: panda3.lambda.tests.ReadTests
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/read
          method: get
          cors: true

  readTest:
    handler: panda3.lambda.tests.ReadTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/{id}
          method: get
          cors: true


  readMyTests:
    handler: panda3.lambda.tests.ReadMyTests
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: /tests/user/{userId}
          method: get
          cors: true

  deleteTest:
    handler: panda3.lambda.tests.DeleteTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/delete/{id}
          method: delete
          cors: true



  updateTest:
    handler: panda3.lambda.tests.UpdateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/update
          method: put
          cors: true

  # answers lambdas
  creatAnswer:
    handler: panda3.lambda.answers.CreateAnswer
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/commit/answer
          method: post
          cors: true

  addUserToTest:
    handler: panda3.lambda.answers.CreateTestForUser
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/add/users
          method: post
          cors: true

  addUserTestResult:
    handler: panda3.lambda.answers.CreateAnswerResults
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/check
          method: post
          cors: true

  readTestAnswers:
    handler: panda3.lambda.answers.ReadTestToCheck
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/answers/{testId}
          method: get
          cors: true

  readUsersFromTest:
    handler: panda3.lambda.paarticipants.ReadTestUsers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/users/{testId}
          method: get
          cors: true


  readTestResults:
    handler: panda3.lambda.answers.ReadUserResults
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/result/{userId}
          method: get
          cors: true


  readAnswer:
    handler: panda3.lambda.answers.ReadAnswer
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/read/single/{id}
          method: get
          cors: true

  readAnswers:
    handler: panda3.lambda.answers.ReadAnswers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/read
          method: get
          cors: true

  readUserAnswers:
    handler: panda3.lambda.answers.ReadUserAnswers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/read/{testId}/user/{userId}
          method: get
          cors: true

  #csv
  importCsv:
    handler: panda3.lambda.csv.Import
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: csv/import
          method: post
          cors: true

  # lambdas for testing
  test:
    handler: panda3.lambda.testingLambdas.SimpleTest
    events:
      - http:
          path: participants/test
          method: post
          cors: true

resources:
  Resources:
    answersTabel:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: answer_table
        AttributeDefinitions:
          - AttributeName: testId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: testId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    testsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tests_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1


